.MODEL SMALL


DRAW_HORLINE MACRO X,Y1,Y2 ; DRAW LINE IN ROW X , FROM Y1 TO Y2-1
    Local L1
    MOV DX,X
    MOV CX,Y1
L1: INT 10h
    INC CX
    CMP CX, Y2
    JL L1
    EndM

DRAW_VERLINE MACRO Y,X1,X2 ; DRAW LINE IN COL Y , FROM X1 TO X2-1
    Local L2
    MOV DX,X1   
    MOV CX,Y
L2: INT 10h
    INC DX
    CMP DX, X2
    JL L2
    EndM
    
DRAW_FULL_BLACKSCREEN MACRO
    Local LP1
    Local PASS
    Local BREAK_LP1
    MOV AH,0CH
    MOV AL,0H;COLOR FIXED
    MOV DX,0
    MOV CX,0
    
    LP1:
    CMP CX,640
        JNE PASS
            
        MOV CX,0
        INC DX
        CMP DX,640
        JE BREAK_LP1
          
        PASS:
        INT 10H
        INC CX
        JMP LP1
        
    BREAK_LP1:
    EndM

    
DRAW_RECTANGLE MACRO X1,Y1,X2,Y2
    DRAW_VERLINE Y1,X1,X2
    DRAW_VERLINE Y2,X1,X2
    DRAW_HORLINE X1,Y1,Y2
    DRAW_HORLINE X2,Y1,Y2
    EndM 
        

DRAW_MOVE MACRO C_X,C_Y,P
    LOCAL ROW_STEP_2
    LOCAL ROW_STEP_3
    LOCAL COL_STEP_1
    LOCAL COL_STEP_2
    LOCAL COL_STEP_3
    LOCAL WRITE
    LOCAL INTERUPT
    
    MOV AH,02 ;set cursor
    MOV BH,0  ;page 0
    
    CMP C_X,1
    JNE ROW_STEP_2
    MOV DH,9
    JMP COL_STEP_1
    
    ROW_STEP_2:
    CMP C_X,2
    JNE ROW_STEP_3
    MOV DH,12
    JMP COL_STEP_1
    
    
    ROW_STEP_3:
    MOV DH,15
    
    
    
    COL_STEP_1:
    CMP C_Y,1
    JNE COL_STEP_2
     MOV DL,30
    JMP WRITE
    
    COL_STEP_2:
    CMP C_Y,2
    JNE COL_STEP_3
    MOV DL,36
    JMP WRITE
    
    COL_STEP_3:
    MOV DL,42
    
    
    WRITE:
    INT 10H
    
    MOV AH,2H
    
    MOV DL,'X'
    CMP P,2
    JE INTERUPT
    MOV DL,'O'
    
    INTERUPT:
    INT 21H
    XOR P,1
    EndM    


STATUS_CHECK MACRO T,F,R
    
    CMP T[0],0
    JE ROW_2
    MOV AL,T[1]
    CMP T[0],AL
    JNE ROW_2
    MOV AL,T[2]
    CMP T[1],AL
    JNE ROW_2
    MOV AL,T[0]
    MOV R,AL
    JMP SKIPALL
      
    ROW_2:
    CMP T[3],0
    JE ROW_3
    MOV AL,T[4]
    CMP T[3],AL
    JNE ROW_3
    MOV AL,T[5]
    CMP T[4],AL
    JNE ROW_3
    MOV AL,T[3]
    MOV R,AL
    JMP SKIPALL
    
    
    ROW_3:
    CMP T[6],0
    JE COL_1
    MOV AL,T[7]
    CMP T[6],AL
    JNE COL_1
    MOV AL,T[8]
    CMP T[7],AL
    JNE COL_1
    MOV AL,T[6]
    MOV R,AL
    JMP SKIPALL
    
    COL_1:
    CMP T[0],0
    JE COL_2
    MOV AL,T[3]
    CMP T[0],AL
    JNE COL_2
    MOV AL,T[6]
    CMP T[3],AL
    JNE COL_2
    MOV AL,T[0]
    MOV R,AL
    JMP SKIPALL
    
    COL_2:
    CMP T[1],0
    JE COL_3
    MOV AL,T[4]
    CMP T[1],AL
    JNE COL_3
    MOV AL,T[7]
    CMP T[4],AL
    JNE COL_3
    MOV AL,T[1]
    MOV R,AL
    JMP SKIPALL
    
    COL_3:
    CMP T[2],0
    JE CORNER_1
    MOV AL,T[5]
    CMP T[2],AL
    JNE CORNER_1
    MOV AL,T[8]
    CMP T[5],AL
    JNE CORNER_1
    MOV AL,T[2]
    MOV R,AL
    JMP SKIPALL
    
    
    CORNER_1:
    CMP T[0],0
    JE CORNER_2
    MOV AL,T[4]
    CMP T[0],AL
    JNE CORNER_2
    MOV AL,T[8]
    CMP T[4],AL
    JNE CORNER_2
    MOV AL,T[0]
    MOV R,AL
    JMP SKIPALL
    
    
    
    CORNER_2:
    CMP T[2],0
    JE SKIPALL
    MOV AL,T[4]
    CMP T[2],AL
    JNE DRAWCHECK
    MOV AL,T[6]
    CMP T[4],AL
    JNE DRAWCHECK
    MOV AL,T[2]
    MOV R,AL
    
    DRAWCHECK:
    CMP F,9
    JNE SKIPALL
    MOV R,4
    
    SKIPALL:
    EndM   
 
.STACK 50H


.DATA




;BLANK DB 15 DUP(0AH),'$'
;SPACE DB 100 DUP(' ')

ROOTX DW '?'
ROOTY DW '?'

CURX DW '?'
CURY DW '?'

ENDCURX DW '?'
ENDCURY DW '?'

CURSOR_X DW '?'
CURSOR_Y DW '?'

PLAYER DB '?'

TRACK DB 10 DUP(0)
TMP DB 10 DUP('?')

KISU DB '?'

    FILLED DB '?'
RES DB '?'

DRAW DB  'ITS DRAW!                             $'
PL1 DB 'PLAYER_1 WINS!$'
PL2 DB 'PLAYER_2 WINS!$'
BEG DB 'LETS PLAY!$'
ONEMORE DB 'PRESS N TO PLAY AGAIN ( ANYTHING ELSE TO QUIT )','$'
MOV1 DB 'PLAYER_1! PLAY!$'
MOV2 DB 'PLAYER_2! PLAY!$'

;FRONT PAGE PART
MSG1  DB 'TIC TAC TOE$'
MSG2  DB 'NEW GAME(N)$'
MSG3  DB '  EXIT(E)$'
SPACE DB 100 DUP (' $')
;FRONT PAGE END

;RECS DW 125,220,175,270, 125,270,175,320, 125,320,175,370, 175,220,225,270, 175,270,225,320, 175,320,225,370, 225,220,270,270, 225,270,270,320, 225,320,270,370
.CODE


MAIN PROC


MOV AX,@DATA
MOV DS,AX



MOV AH,0
MOV AL,12H
INT 10H

MOV AH,0CH
MOV AL,13H ;COLOR FIXED
DRAW_RECTANGLE 15,240,65,400

MOV AH,0CH
MOV AL,9H  ;COLOR FIXED
DRAW_RECTANGLE 100,240,379,400

MOV AH,0CH
MOV AL,6H  ;COLOR FIXED
DRAW_RECTANGLE 160,260,210,380

MOV AH,0CH
MOV AL,15H ;COLOR FIXED
DRAW_RECTANGLE 269,260,319,380

MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,2  ;row 0
MOV DL,35 ;col 30
INT 10H

MOV AH,9H
LEA DX,MSG1
INT 21H

MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,11  ;row 0
MOV DL,35 ;col 30
INT 10H

MOV AH,9H
LEA DX,MSG2
INT 21H

MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,18  ;row 0
MOV DL,35 ;col 30
INT 10H

MOV AH,9H
LEA DX,MSG3
INT 21H

REPEATIT:

MOV AH,0
INT 16H
CMP AL,'E'
JNE PASS_N
JMP CROSS
PASS_N:
CMP AL,'N'
JNE REPEATIT;
; THE GAME BEGINS FROM HERE ......................................... 
DO_IT_AGAIN:
DRAW_FULL_BLACKSCREEN
;MOV AH,0CH
;MOV AL,3
;INT 10H

;MOV DL,RECS[0]
;MOV AH,2
;INT 21H


MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,4;row 0
MOV DL,32 ;col 30
INT 10H

LEA DX,BEG
MOV AH,9
INT 21H
   




MOV BX,0
WHILE_1:
    MOV TRACK[BX],0
    ADD BX,1
    CMP BX,9
    JE BREAK_WHILE
    JMP WHILE_1
BREAK_WHILE:    

;INITIALIZATION START FOR MOVING

MOV ROOTX,125
MOV ROOTY,220


MOV CURSOR_X,1
MOV CURSOR_Y,1

MOV PLAYER,2

MOV FILLED,0
MOV RES,0

;INITIALIZATION END FOR MOVING

KEY_PAD:

MOV AH,0CH
MOV AL,8H;COLOR FIXED

DRAW_RECTANGLE 125,220,175,270
DRAW_RECTANGLE 125,270,175,320
DRAW_RECTANGLE 125,320,175,370


DRAW_RECTANGLE 175,220,225,270
DRAW_RECTANGLE 175,270,225,320
DRAW_RECTANGLE 175,320,225,370


DRAW_RECTANGLE 225,220,275,270
DRAW_RECTANGLE 225,270,275,320
DRAW_RECTANGLE 225,320,275,370

    


GET_INPUT:

  MOV AH,02 ;set cursor
    MOV BH,0  ;page 0
    MOV DH,20;row 0
    MOV DL,30 ;col 30
    INT 10H

    MOV AH,9
    LEA DX,MOV1
    CMP PLAYER,2
    JE SKIPTHIS
    LEA DX,MOV2
    SKIPTHIS:
    INT 21H
    
    MOV AX,50
    MOV BX,CURSOR_X
    DEC BX
    MUL BX
    MOV BX,ROOTX
    MOV CURX,BX
    ADD CURX,AX ; FIXED THE CURX
    
    MOV AX,50
    MOV BX,CURSOR_Y
    DEC BX
    MUL BX
    MOV BX,ROOTY
    MOV CURY,BX
    ADD CURY,AX ; FIXED CURY
    
    MOV AX,CURX
    ADD AX,50
    MOV ENDCURX,AX
    
    MOV AX,CURY
    ADD AX,50
    MOV ENDCURY,AX
    
    MOV AH,0CH
    MOV AL,PLAYER;COLOR FIXED
    DRAW_RECTANGLE CURX,CURY,ENDCURX,ENDCURY
    
    STATUS_CHECK TRACK,FILLED,RES
    
    CMP RES,0
    JE PART1
    JMP GAME_OVER
    
    PART1:
    MOV AH,0
    INT 16H
    CMP AL,'A'
    JNE CHECK2
    
    CMP CURSOR_Y,1;A PRESS HANDLING
    JE DOIT
    DEC CURSOR_Y
    JMP KEY_PAD
    
   
    
    CHECK2:
    CMP AL,'D'
    JNE CHECK3
    
    CMP CURSOR_Y,3;D PRESS HANDLING
    JE DOIT
    INC CURSOR_Y
    JMP KEY_PAD
    
     DOIT:
    JMP AGAIN
    
    CHECK3:
    CMP AL,'W'
    JNE CHECK4
    
    CMP CURSOR_X,1;W PRESS HANDLING
    JE DOIT
    DEC CURSOR_X
    JMP KEY_PAD
    
    CHECK4:
    CMP AL,'S'
    JNE CHECK5
    
    CMP CURSOR_X,3;W PRESS HANDLING
    JE AGAIN
    INC CURSOR_X
    JMP KEY_PAD
    
    
    CHECK5:
    CMP AL,' '
    JNE AGAIN
    
    MOV AX,CURSOR_X
    DEC AX
    MOV BX,3
    MUL BX
   
    MOV BX,CURSOR_Y
    DEC BX
    ADD AX,BX
    
    MOV BX,AX
    CMP TRACK[BX],0
    JNE AGAIN
    MOV CL,PLAYER
    MOV TRACK[BX],CL
    
    ADD FILLED,1
   
    
    DRAW_MOVE CURSOR_X,CURSOR_Y,PLAYER
    
    AGAIN:
    JMP GET_INPUT
GAME_OVER:


MOV AH,0CH
MOV AL,RES;COLOR FIXED

DRAW_RECTANGLE 125,220,175,270
DRAW_RECTANGLE 125,270,175,320
DRAW_RECTANGLE 125,320,175,370


DRAW_RECTANGLE 175,220,225,270
DRAW_RECTANGLE 175,270,225,320
DRAW_RECTANGLE 175,320,225,370


DRAW_RECTANGLE 225,220,275,270
DRAW_RECTANGLE 225,270,275,320
DRAW_RECTANGLE 225,320,275,370

MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,20;row 0
MOV DL,30 ;col 30
INT 10H

CMP RES,4
JNE TWO
LEA DX,DRAW
JMP PRINTIT
TWO:
CMP RES,2
JNE THREE
LEA DX,PL1
JMP PRINTIT
THREE:
LEA DX,PL2
PRINTIT:
MOV AH,9
INT 21H


MOV AH,02 ;set cursor
MOV BH,0  ;page 0
MOV DH,22;row 0
MOV DL,18 ;col 30
INT 10H

LEA DX,ONEMORE
MOV AH,9
INT 21H

MOV AH,0
INT 16H
CMP AL,'N'
JNE CROSS
JMP DO_IT_AGAIN


CROSS:
DRAW_FULL_BLACKSCREEN
MOV AH,4CH
INT 21H 


MAIN ENDP
END MAIN



